
import 'package:flutter/material.dart';
import '../config/ui_reference.dart';

// D√©finition minimale pour compatibilit√©
class BarActivity {
  final String id;
  final String title;
  final String description;
  final String emoji;
  final dynamic type;
  final int participantsMin;
  final int participantsMax;
  final Duration estimatedDuration;
  final List<String> rewards;

  const BarActivity({
    required this.id,
    required this.title,
    required this.description,
    required this.emoji,
    required this.type,
    required this.participantsMin,
    required this.participantsMax,
    required this.estimatedDuration,
    required this.rewards,
  });
}

class Badge {
  final String name;
  const Badge({required this.name});
}

class Reward {
  final String title;
  const Reward({required this.title});
}

/// Mod√®le pour le contenu th√©matique d'un bar

class BarContent {
  final String id;
  final String name;
  final String emoji;
  final String description;
  final Color themeColor;
  final List<BarActivity> activities;
  final List<BarChallenge> challenges;
  final BarAccessLevel accessLevel;
  final String? unlockCondition;
  // Ajouts pour compatibilit√© UI
  final List<Group> groups;
  final List<SpecialEvent> specialEvents;
  final List<Badge> badges;
  final List<Reward> rewards;
  final int totalVisits;
  final int totalChallengesCompleted;

  const BarContent({
    required this.id,
    required this.name,
    required this.emoji,
    required this.description,
    required this.themeColor,
    required this.activities,
    required this.challenges,
    required this.accessLevel,
    this.unlockCondition,
    this.groups = const [],
    this.specialEvents = const [],
    this.badges = const [],
    this.rewards = const [],
    this.totalVisits = 0,
    this.totalChallengesCompleted = 0,
  });
}


class Group {
  final String name;
  const Group({required this.name});
}

class SpecialEvent {
  final String title;
  const SpecialEvent({required this.title});
}


// Badge et Reward sont suppos√©s √™tre d√©finis ailleurs dans le projet
// Si besoin, ajouter ici des classes vides pour √©viter les erreurs de compilation :
// class Badge {}
// class Reward {}

/// D√©fi/challenge d'un bar
class BarChallenge {
  final String id;
  final String title;
  final String description;
  final String emoji;
  final ChallengeType type;
  final int pointsReward;
  final bool isDaily;
  final bool isWeekly;
  final Map<String, dynamic>? requirements;

  const BarChallenge({
    required this.id,
    required this.title,
    required this.description,
    required this.emoji,
    required this.type,
    required this.pointsReward,
    this.isDaily = false,
    this.isWeekly = false,
    this.requirements,
  });
}

enum ActivityType {
  conversation,
  game,
  teamChallenge,
  quest,
  riddle,
}

enum ChallengeType {
  daily,
  weekly,
  special,
  unlock,
}

enum BarAccessLevel {
  public,     // Accessible √† tous
  restricted, // Conditions √† remplir
  premium,    // N√©cessite des points/achat
  hidden,     // Acc√®s par √©nigmes
}

/// Service de gestion du contenu des bars
class BarContentService {
  static List<BarContent> getAllBars() {
    return [
      _getRomanticBar(),
      _getHumorBar(),
      _getPiratesBar(),
      _getWeeklyBar(),
      _getHiddenBar(),
    ];
  }

  static BarContent? getBarById(String id) {
    try {
      return getAllBars().firstWhere((bar) => bar.id == id);
    } catch (e) {
      return null;
    }
  }

  /// Bar Romantique üåπ
  static BarContent _getRomanticBar() {
    return BarContent(
      id: 'romantic',
      name: 'Bar Romantique',
      emoji: 'üåπ',
      description: 'Ambiance tamis√©e, conversations intimes et connexions profondes',
      themeColor: const Color(0xFFE91E63),
      accessLevel: BarAccessLevel.public,
      activities: [
        BarActivity(
          id: 'deep_conversation',
          title: 'Conversation Profonde',
          description: 'Questions intimes pour mieux se d√©couvrir en t√™te-√†-t√™te',
          emoji: 'üí≠',
          type: ActivityType.conversation,
          participantsMin: 2,
          participantsMax: 2,
          estimatedDuration: Duration(minutes: 30),
          rewards: ['Points de compatibilit√©', 'Badge "C≈ìur Ouvert"'],
        ),
        BarActivity(
          id: 'romantic_quest',
          title: 'Qu√™te Romantique',
          description: 'Cr√©ez ensemble une histoire d\'amour virtuelle',
          emoji: 'üíï',
          type: ActivityType.quest,
          participantsMin: 2,
          participantsMax: 4,
          estimatedDuration: Duration(minutes: 45),
          rewards: ['Points Romance', 'D√©blocage contenu exclusif'],
        ),
        BarActivity(
          id: 'poetry_challenge',
          title: 'D√©fi Po√©sie',
          description: 'Composez des vers romantiques ensemble',
          emoji: 'üìù',
          type: ActivityType.game,
          participantsMin: 2,
          participantsMax: 6,
          estimatedDuration: Duration(minutes: 20),
          rewards: ['Badge "Po√®te du C≈ìur"', 'Points cr√©ativit√©'],
        ),
      ],
      challenges: [
        BarChallenge(
          id: 'daily_compliment',
          title: 'Compliment du Jour',
          description: 'Faites un compliment sinc√®re √† 3 personnes',
          emoji: 'üåü',
          type: ChallengeType.daily,
          pointsReward: 50,
          isDaily: true,
        ),
        BarChallenge(
          id: 'romantic_story',
          title: 'Histoire Romantique',
          description: 'Racontez votre plus beau souvenir romantique',
          emoji: 'üíñ',
          type: ChallengeType.special,
          pointsReward: 100,
        ),
      ],
    );
  }

  /// Bar Humoristique üòÑ
  static BarContent _getHumorBar() {
    return BarContent(
      id: 'humor',
      name: 'Bar Humoristique',
      emoji: 'üòÑ',
      description: 'D√©fi du jour, blagues et rires garantis',
      themeColor: const Color(0xFFFF9800),
      accessLevel: BarAccessLevel.public,
      activities: [
        BarActivity(
          id: 'joke_battle',
          title: 'Battle de Blagues',
          description: 'Qui raconte la meilleure blague ?',
          emoji: 'ü§£',
          type: ActivityType.game,
          participantsMin: 2,
          participantsMax: 8,
          estimatedDuration: Duration(minutes: 15),
          rewards: ['Badge "Roi de l\'Humour"', 'Points Charisme'],
        ),
        BarActivity(
          id: 'improv_theater',
          title: 'Th√©√¢tre d\'Impro',
          description: 'Improvisations dr√¥les sur des th√®mes donn√©s',
          emoji: 'üé≠',
          type: ActivityType.teamChallenge,
          participantsMin: 4,
          participantsMax: 6,
          estimatedDuration: Duration(minutes: 30),
          rewards: ['Points Cr√©ativit√©', 'D√©blocage Bar Pirates'],
        ),
        BarActivity(
          id: 'meme_creation',
          title: 'Cr√©ation de M√®mes',
          description: 'Cr√©ez les m√®mes les plus dr√¥les ensemble',
          emoji: 'üòÇ',
          type: ActivityType.game,
          participantsMin: 2,
          participantsMax: 4,
          estimatedDuration: Duration(minutes: 25),
          rewards: ['Badge "M√®me Master"', 'Points Viral'],
        ),
      ],
      challenges: [
        BarChallenge(
          id: 'daily_laugh',
          title: 'Rire Quotidien',
          description: 'Faites rire 5 personnes aujourd\'hui',
          emoji: 'üòÜ',
          type: ChallengeType.daily,
          pointsReward: 75,
          isDaily: true,
        ),
        BarChallenge(
          id: 'comedy_genius',
          title: 'G√©nie de la Com√©die',
          description: 'Remportez 3 battles de blagues',
          emoji: 'üëë',
          type: ChallengeType.special,
          pointsReward: 200,
          requirements: {'joke_battle_wins': 3},
        ),
      ],
    );
  }

  /// Bar Pirates üè¥‚Äç‚ò†Ô∏è
  static BarContent _getPiratesBar() {
    return BarContent(
      id: 'pirates',
      name: 'Bar Pirates',
      emoji: 'üè¥‚Äç‚ò†Ô∏è',
      description: 'Chasse au tr√©sor en √©quipe, aventures et d√©fis corsaires',
      themeColor: const Color(0xFF795548),
      accessLevel: BarAccessLevel.restricted,
      unlockCondition: 'Compl√©ter 2 activit√©s du Bar Humoristique',
      activities: [
        BarActivity(
          id: 'treasure_hunt',
          title: 'Chasse au Tr√©sor',
          description: 'R√©solvez des √©nigmes pour trouver le tr√©sor perdu',
          emoji: 'üó∫Ô∏è',
          type: ActivityType.quest,
          participantsMin: 3,
          participantsMax: 6,
          estimatedDuration: Duration(hours: 1),
          rewards: ['Pi√®ces d\'or virtuelles', 'Badge "Chasseur de Tr√©sor"'],
        ),
        BarActivity(
          id: 'pirate_duel',
          title: 'Duel de Pirates',
          description: 'Affrontement d\'√©nigmes entre √©quipes rivales',
          emoji: '‚öîÔ∏è',
          type: ActivityType.teamChallenge,
          participantsMin: 4,
          participantsMax: 8,
          estimatedDuration: Duration(minutes: 45),
          rewards: ['Titre "Capitaine"', 'Acc√®s Zone VIP'],
        ),
        BarActivity(
          id: 'sea_legends',
          title: 'L√©gendes des Mers',
          description: 'Racontez vos aventures maritimes imaginaires',
          emoji: 'üåä',
          type: ActivityType.conversation,
          participantsMin: 3,
          participantsMax: 5,
          estimatedDuration: Duration(minutes: 30),
          rewards: ['Points Aventure', 'Badge "Conteur des Mers"'],
        ),
      ],
      challenges: [
        BarChallenge(
          id: 'daily_adventure',
          title: 'Aventure Quotidienne',
          description: 'Participez √† une qu√™te chaque jour',
          emoji: 'üß≠',
          type: ChallengeType.daily,
          pointsReward: 100,
          isDaily: true,
        ),
        BarChallenge(
          id: 'pirate_legend',
          title: 'L√©gende Pirate',
          description: 'Remportez 5 chasses au tr√©sor',
          emoji: 'üëë',
          type: ChallengeType.special,
          pointsReward: 500,
          requirements: {'treasure_hunt_wins': 5},
        ),
      ],
    );
  }

  /// Bar Hebdomadaire üìÖ
  static BarContent _getWeeklyBar() {
    return BarContent(
      id: 'weekly',
      name: 'Bar Hebdomadaire',
      emoji: 'üìÖ',
      description: 'Groupe de 4 (2H/2F) - Th√®me changeant chaque semaine',
      themeColor: const Color(0xFF9C27B0),
      accessLevel: BarAccessLevel.restricted,
      unlockCondition: 'Niveau 5 et profil complet',
      activities: [
        BarActivity(
          id: 'weekly_theme',
          title: 'D√©fi Th√©matique',
          description: 'Activit√© bas√©e sur le th√®me de la semaine',
          emoji: 'üéØ',
          type: ActivityType.teamChallenge,
          participantsMin: 4,
          participantsMax: 4, // Exactement 2H + 2F
          estimatedDuration: Duration(hours: 1, minutes: 30),
          rewards: ['Badge Th√©matique', 'Points Hebdomadaires'],
        ),
        BarActivity(
          id: 'group_bonding',
          title: 'Coh√©sion de Groupe',
          description: 'Activit√©s pour cr√©er des liens durables',
          emoji: 'ü§ù',
          type: ActivityType.teamChallenge,
          participantsMin: 4,
          participantsMax: 4,
          estimatedDuration: Duration(minutes: 45),
          rewards: ['Points Amiti√©', 'D√©blocage conversations priv√©es'],
        ),
        BarActivity(
          id: 'weekly_project',
          title: 'Projet Collaboratif',
          description: 'Cr√©ez quelque chose ensemble selon le th√®me',
          emoji: 'üõ†Ô∏è',
          type: ActivityType.quest,
          participantsMin: 4,
          participantsMax: 4,
          estimatedDuration: Duration(hours: 2),
          rewards: ['≈íuvre collective', 'Badge "Cr√©ateur"'],
        ),
      ],
      challenges: [
        BarChallenge(
          id: 'weekly_participation',
          title: 'Participation Hebdo',
          description: 'Participez √† toutes les activit√©s de la semaine',
          emoji: 'üèÜ',
          type: ChallengeType.weekly,
          pointsReward: 300,
          isWeekly: true,
        ),
        BarChallenge(
          id: 'group_harmony',
          title: 'Harmonie de Groupe',
          description: 'Maintenez une bonne entente pendant 4 semaines',
          emoji: 'üí´',
          type: ChallengeType.special,
          pointsReward: 1000,
          requirements: {'weeks_harmony': 4},
        ),
      ],
    );
  }

  /// Bar Cach√© üëë
  static BarContent _getHiddenBar() {
    return BarContent(
      id: 'hidden',
      name: 'Bar Cach√©',
      emoji: 'üëë',
      description: 'Acc√®s exclusif par r√©solution d\'√©nigmes complexes',
      themeColor: const Color(0xFFFFD700),
      accessLevel: BarAccessLevel.hidden,
      unlockCondition: 'R√©soudre l\'√ânigme du Sphinx d\'Or',
      activities: [
        BarActivity(
          id: 'sphinx_riddle',
          title: '√ânigme du Sphinx',
          description: 'R√©solvez les myst√®res les plus complexes',
          emoji: 'üîÆ',
          type: ActivityType.riddle,
          participantsMin: 1,
          participantsMax: 3,
          estimatedDuration: Duration(hours: 2),
          rewards: ['Acc√®s Bar Cach√©', 'Titre "Ma√Ætre des √ânigmes"'],
        ),
        BarActivity(
          id: 'exclusive_gathering',
          title: 'Rassemblement Exclusif',
          description: 'Rencontres entre membres d\'√©lite du Bar Cach√©',
          emoji: '‚ú®',
          type: ActivityType.conversation,
          participantsMin: 2,
          participantsMax: 6,
          estimatedDuration: Duration(hours: 1),
          rewards: ['Connexions VIP', 'Acc√®s contenu secret'],
        ),
        BarActivity(
          id: 'mystery_quest',
          title: 'Qu√™te Myst√®re',
          description: 'Aventures secr√®tes pour initi√©s seulement',
          emoji: 'üóùÔ∏è',
          type: ActivityType.quest,
          participantsMin: 2,
          participantsMax: 4,
          estimatedDuration: Duration(hours: 3),
          rewards: ['Artefacts rares', 'Pouvoirs sp√©ciaux'],
        ),
      ],
      challenges: [
        BarChallenge(
          id: 'daily_mystery',
          title: 'Myst√®re Quotidien',
          description: 'R√©solvez une √©nigme myst√©rieuse chaque jour',
          emoji: 'üåü',
          type: ChallengeType.daily,
          pointsReward: 200,
          isDaily: true,
        ),
        BarChallenge(
          id: 'grand_master',
          title: 'Grand Ma√Ætre',
          description: 'Atteignez le plus haut niveau de l\'√©lite',
          emoji: 'üëë',
          type: ChallengeType.special,
          pointsReward: 2000,
          requirements: {'enigma_solved': 50, 'vip_connections': 10},
        ),
      ],
    );
  }
}