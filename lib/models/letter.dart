import 'package:cloud_firestore/cloud_firestore.dart';

class LetterThread {
  final String threadId; // Format: uidA_uidB (alphab√©tique)
  final List<String> participants; // Toujours 2 participants
  final ThreadStatus status;
  final String lastTurnUid; // Qui doit r√©pondre
  final DateTime lastMessageAt;
  final DateTime updatedAt;
  final List<String> archivedBy; // UIDs ayant archiv√©
  final DateTime? ghostingDetectedAt;
  final int messageCount;

  LetterThread({
    required this.threadId,
    required this.participants,
    this.status = ThreadStatus.active,
    required this.lastTurnUid,
    required this.lastMessageAt,
    required this.updatedAt,
    this.archivedBy = const [],
    this.ghostingDetectedAt,
    this.messageCount = 0,
  });

  factory LetterThread.fromFirestore(DocumentSnapshot doc) {
    Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
    
    return LetterThread(
      threadId: doc.id,
      participants: List<String>.from(data['participants'] ?? []),
      status: ThreadStatus.fromString(data['status'] ?? 'active'),
      lastTurnUid: data['lastTurnUid'] ?? '',
      lastMessageAt: (data['lastMessageAt'] as Timestamp).toDate(),
      updatedAt: (data['updatedAt'] as Timestamp).toDate(),
      archivedBy: List<String>.from(data['archivedBy'] ?? []),
      ghostingDetectedAt: data['ghostingDetectedAt'] != null
          ? (data['ghostingDetectedAt'] as Timestamp).toDate()
          : null,
      messageCount: data['messageCount'] ?? 0,
    );
  }

  Map<String, dynamic> toFirestore() {
    return {
      'participants': participants,
      'status': status.value,
      'lastTurnUid': lastTurnUid,
      'lastMessageAt': Timestamp.fromDate(lastMessageAt),
      'updatedAt': Timestamp.fromDate(updatedAt),
      'archivedBy': archivedBy,
      'ghostingDetectedAt': ghostingDetectedAt != null
          ? Timestamp.fromDate(ghostingDetectedAt!)
          : null,
      'messageCount': messageCount,
    };
  }

  // Cr√©er un thread ID depuis deux UIDs
  static String createThreadId(String uid1, String uid2) {
    List<String> sorted = [uid1, uid2]..sort();
    return '${sorted[0]}_${sorted[1]}';
  }

  // Obtenir l'autre participant
  String getOtherParticipant(String currentUid) {
    return participants.firstWhere(
      (uid) => uid != currentUid,
      orElse: () => '',
    );
  }

  // V√©rifier si c'est le tour d'un utilisateur
  bool isUserTurn(String uid) {
    return lastTurnUid != uid; // C'est le tour si ce n'est PAS lui qui a envoy√© le dernier
  }

  // V√©rifier si archiv√© par un utilisateur
  bool isArchivedBy(String uid) {
    return archivedBy.contains(uid);
  }

  // V√©rifier si le thread est en ghosting
  bool get isGhosting {
    return status == ThreadStatus.ghostingDetected;
  }

  // Calculer le temps depuis le dernier message
  Duration get timeSinceLastMessage {
    return DateTime.now().difference(lastMessageAt);
  }

  // V√©rifier si le thread doit √™tre marqu√© comme ghosting (7 jours)
  bool get shouldDetectGhosting {
    return timeSinceLastMessage.inDays >= 7 && status == ThreadStatus.active;
  }

  LetterThread copyWith({
    ThreadStatus? status,
    String? lastTurnUid,
    DateTime? lastMessageAt,
    DateTime? updatedAt,
    List<String>? archivedBy,
    DateTime? ghostingDetectedAt,
    int? messageCount,
  }) {
    return LetterThread(
      threadId: threadId,
      participants: participants,
      status: status ?? this.status,
      lastTurnUid: lastTurnUid ?? this.lastTurnUid,
      lastMessageAt: lastMessageAt ?? this.lastMessageAt,
      updatedAt: updatedAt ?? this.updatedAt,
      archivedBy: archivedBy ?? this.archivedBy,
      ghostingDetectedAt: ghostingDetectedAt ?? this.ghostingDetectedAt,
      messageCount: messageCount ?? this.messageCount,
    );
  }
}

enum ThreadStatus {
  active('active'),
  archived('archived'),
  ghostingDetected('ghosting_detected');

  const ThreadStatus(this.value);
  final String value;

  static ThreadStatus fromString(String value) {
    return ThreadStatus.values.firstWhere(
      (status) => status.value == value,
      orElse: () => ThreadStatus.active,
    );
  }

  String get displayName {
    switch (this) {
      case ThreadStatus.active:
        return 'Active';
      case ThreadStatus.archived:
        return 'Archiv√©e';
      case ThreadStatus.ghostingDetected:
        return 'Ghosting d√©tect√©';
    }
  }
}

class LetterMessage {
  final String messageId;
  final String threadId;
  final String authorUid;
  final String content; // Max 500 mots
  final List<LetterAttachment> attachments;
  final DateTime createdAt;
  final bool read;
  final Map<String, dynamic>? metadata; // Style du papier, etc.

  LetterMessage({
    required this.messageId,
    required this.threadId,
    required this.authorUid,
    required this.content,
    this.attachments = const [],
    required this.createdAt,
    this.read = false,
    this.metadata,
  });

  factory LetterMessage.fromFirestore(DocumentSnapshot doc) {
    Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
    
    return LetterMessage(
      messageId: doc.id,
      threadId: data['threadId'] ?? '',
      authorUid: data['authorUid'] ?? '',
      content: data['content'] ?? '',
      attachments: (data['attachments'] as List<dynamic>?)
          ?.map((a) => LetterAttachment.fromMap(a as Map<String, dynamic>))
          .toList() ?? [],
      createdAt: (data['createdAt'] as Timestamp).toDate(),
      read: data['read'] ?? false,
      metadata: data['metadata'] as Map<String, dynamic>?,
    );
  }

  Map<String, dynamic> toFirestore() {
    return {
      'threadId': threadId,
      'authorUid': authorUid,
      'content': content,
      'attachments': attachments.map((a) => a.toMap()).toList(),
      'createdAt': Timestamp.fromDate(createdAt),
      'read': read,
      'metadata': metadata,
    };
  }

  // Compter le nombre de mots
  int get wordCount {
    return content.trim().split(RegExp(r'\s+')).length;
  }

  // V√©rifier si la limite de mots est respect√©e
  bool get isWithinWordLimit {
    return wordCount <= 500;
  }

  LetterMessage copyWith({
    String? content,
    List<LetterAttachment>? attachments,
    bool? read,
    Map<String, dynamic>? metadata,
  }) {
    return LetterMessage(
      messageId: messageId,
      threadId: threadId,
      authorUid: authorUid,
      content: content ?? this.content,
      attachments: attachments ?? this.attachments,
      createdAt: createdAt,
      read: read ?? this.read,
      metadata: metadata ?? this.metadata,
    );
  }
}

class LetterAttachment {
  final String type; // 'gift', 'image', 'audio'
  final String url;
  final String? name;
  final int? cost; // Co√ªt en pi√®ces

  LetterAttachment({
    required this.type,
    required this.url,
    this.name,
    this.cost,
  });

  factory LetterAttachment.fromMap(Map<String, dynamic> data) {
    return LetterAttachment(
      type: data['type'] ?? '',
      url: data['url'] ?? '',
      name: data['name'],
      cost: data['cost'],
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'type': type,
      'url': url,
      'name': name,
      'cost': cost,
    };
  }
}

// ===== NOUVEAUX MOD√àLES POUR LE SYST√àME DE TEMPLATES =====

/// Template de lettre pr√©d√©fini
class LetterTemplate {
  final String id;
  final String name;
  final String description;
  final String emoji;
  final LetterType type;
  final String templateContent;
  final Map<String, String> placeholders;
  final LetterStyle defaultStyle;
  final bool isPremium;
  final int unlockLevel;

  const LetterTemplate({
    required this.id,
    required this.name,
    required this.description,
    required this.emoji,
    required this.type,
    required this.templateContent,
    required this.placeholders,
    required this.defaultStyle,
    this.isPremium = false,
    this.unlockLevel = 1,
  });
}

/// Style de pr√©sentation d'une lettre
class LetterStyle {
  final String backgroundColor;
  final String textColor;
  final String fontFamily;
  final double fontSize;
  final String paperTexture;
  final String borderStyle;
  final List<String> decorations;

  const LetterStyle({
    required this.backgroundColor,
    required this.textColor,
    required this.fontFamily,
    required this.fontSize,
    required this.paperTexture,
    required this.borderStyle,
    this.decorations = const [],
  });
}

/// Types de lettres disponibles
enum LetterType {
  romantic,      // Lettre romantique
  friendship,    // Lettre d'amiti√©
  apology,      // Lettre d'excuses
  gratitude,    // Lettre de remerciement
  confession,   // D√©claration
  poetry,       // Po√©sie
  story,        // Petite histoire
  surprise,     // Surprise
  anonymous,    // Lettre anonyme
  future,       // Lettre future (programm√©e)
}

/// Service de gestion des lettres avec templates
class LetterService {
  static List<LetterTemplate> getAvailableTemplates({int userLevel = 1}) {
    return [
      // Templates romantiques
      LetterTemplate(
        id: 'romantic_classic',
        name: 'D√©claration Classique',
        description: 'Une d√©claration d\'amour intemporelle',
        emoji: 'üíï',
        type: LetterType.romantic,
        templateContent: '''Mon/Ma {recipient_title} {name},

Depuis que nos chemins se sont crois√©s, ma vie a pris une couleur nouvelle. 
Chaque jour pass√© √† tes c√¥t√©s est un cadeau que je ch√©ris.

{personal_message}

Avec tout mon amour,
{sender_name} üíñ''',
        placeholders: {
          'recipient_title': 'ch√©ri(e)',
          'name': '[Nom]',
          'personal_message': '[Votre message personnel]',
          'sender_name': '[Votre nom]',
        },
        defaultStyle: LetterStyle(
          backgroundColor: '#FFF5F5',
          textColor: '#8B4A6B',
          fontFamily: 'Georgia',
          fontSize: 16.0,
          paperTexture: 'parchemin',
          borderStyle: 'coeur',
          decorations: ['roses', 'coeurs'],
        ),
      ),

      LetterTemplate(
        id: 'friendship_warm',
        name: 'Amiti√© Chaleureuse',
        description: 'Pour exprimer une amiti√© sinc√®re',
        emoji: 'ü§ó',
        type: LetterType.friendship,
        templateContent: '''Salut {name} !

Tu sais, avoir un(e) ami(e) comme toi, c'est vraiment pr√©cieux. 
Tu es toujours l√† dans les moments importants, et √ßa me touche beaucoup.

{personal_message}

Ton ami(e) fid√®le,
{sender_name} üåü''',
        placeholders: {
          'name': '[Pr√©nom]',
          'personal_message': '[Votre message d\'amiti√©]',
          'sender_name': '[Votre nom]',
        },
        defaultStyle: LetterStyle(
          backgroundColor: '#F0F8FF',
          textColor: '#4682B4',
          fontFamily: 'Georgia',
          fontSize: 16.0,
          paperTexture: 'lin',
          borderStyle: 'simple',
          decorations: ['etoiles', 'nuages'],
        ),
      ),

      LetterTemplate(
        id: 'apology_sincere',
        name: 'Excuses Sinc√®res',
        description: 'Pour pr√©senter des excuses authentiques',
        emoji: 'üôè',
        type: LetterType.apology,
        templateContent: '''Cher/Ch√®re {name},

Je r√©alise que mes mots ou mes actions t'ont bless√©(e), et j'en suis vraiment d√©sol√©(e).
Ce n'√©tait pas mon intention, mais je comprends ta r√©action.

{personal_message}

J'esp√®re que tu pourras me pardonner.
{sender_name}''',
        placeholders: {
          'name': '[Pr√©nom]',
          'personal_message': '[Vos excuses personnelles]',
          'sender_name': '[Votre nom]',
        },
        defaultStyle: LetterStyle(
          backgroundColor: '#FFF8DC',
          textColor: '#8B4513',
          fontFamily: 'Georgia',
          fontSize: 16.0,
          paperTexture: 'papier_recycl√©',
          borderStyle: 'sobre',
          decorations: ['feuilles'],
        ),
      ),

      LetterTemplate(
        id: 'gratitude_deep',
        name: 'Gratitude Profonde',
        description: 'Pour exprimer une reconnaissance sinc√®re',
        emoji: 'üôè',
        type: LetterType.gratitude,
        templateContent: '''Mon/Ma cher/ch√®re {name},

Aujourd'hui, j'ai envie de prendre le temps de te dire MERCI.
Merci pour {reason_1}.
Merci pour {reason_2}.
Merci pour {reason_3}.

{personal_gratitude}

Tu comptes √©norm√©ment pour moi, et j'avais besoin que tu le saches.

Avec toute ma reconnaissance,
{sender_name} üåà''',
        placeholders: {
          'name': '[Pr√©nom]',
          'reason_1': '[premi√®re raison de gratitude]',
          'reason_2': '[deuxi√®me raison de gratitude]',
          'reason_3': '[troisi√®me raison de gratitude]',
          'personal_gratitude': '[message personnel de remerciement]',
          'sender_name': '[Votre nom]',
        },
        defaultStyle: LetterStyle(
          backgroundColor: '#FFF9E6',
          textColor: '#D97706',
          fontFamily: 'Georgia',
          fontSize: 16.0,
          paperTexture: 'kraft',
          borderStyle: 'naturel',
          decorations: ['soleil', 'fleurs_sauvages'],
        ),
      ),

      // Templates premium (niveau 3+)
      if (userLevel >= 3)
        LetterTemplate(
          id: 'poetry_romantic',
          name: 'Po√©sie Romantique',
          description: 'Un po√®me d\'amour personnalis√©',
          emoji: 'üìù',
          type: LetterType.poetry,
          templateContent: '''√Ä toi, {name} üí´

Tes yeux sont des √©toiles dans la nuit,
Ton sourire, le soleil de ma vie.
{custom_verse_1}

Quand tu parles, le monde s'illumine,
Quand tu ris, mon c≈ìur se dessine.
{custom_verse_2}

Alors reste pr√®s de moi, mon tr√©sor,
Car avec toi, je vis encore et encore.

Ton po√®te √©pris,
{sender_name} üåπ''',
          placeholders: {
            'name': '[Pr√©nom]',
            'custom_verse_1': '[Vos vers personnels - ligne 1]',
            'custom_verse_2': '[Vos vers personnels - ligne 2]',
            'sender_name': '[Votre nom]',
          },
          defaultStyle: LetterStyle(
            backgroundColor: '#F8F0FF',
            textColor: '#663399',
            fontFamily: 'Georgia',
            fontSize: 18.0,
            paperTexture: 'parchemin_royal',
            borderStyle: 'ornements',
            decorations: ['plumes', 'enluminures'],
          ),
          isPremium: true,
          unlockLevel: 3,
        ),
    ].where((template) => template.unlockLevel <= userLevel).toList();
  }

  /// G√©n√®re des suggestions de contenu bas√©es sur le type de lettre
  static List<String> getContentSuggestions(LetterType type) {
    switch (type) {
      case LetterType.romantic:
        return [
          "Chaque jour avec toi est comme un r√™ve qui devient r√©alit√©...",
          "Tu illumines ma vie comme le soleil illumine le monde...",
          "Dans tes yeux, j'ai trouv√© mon foyer...",
          "Ton amour est la m√©lodie qui fait danser mon c≈ìur...",
          "Avec toi, j'ai appris ce que signifie vraiment aimer...",
        ];
      
      case LetterType.friendship:
        return [
          "Notre amiti√© est un tr√©sor que je garde pr√©cieusement...",
          "Tu es cette personne sur qui je peux toujours compter...",
          "Nos fous rires r√©sonnent encore dans ma m√©moire...",
          "Tu as ce don de rendre tout plus beau, plus simple...",
          "Gr√¢ce √† toi, j'ai d√©couvert ce qu'est la vraie amiti√©...",
        ];

      case LetterType.apology:
        return [
          "Mes mots ont d√©pass√© ma pens√©e, et j'en suis vraiment d√©sol√©(e)...",
          "Je r√©alise maintenant l'impact de mes actions...",
          "Ton pardon serait le plus beau des cadeaux...",
          "Je veux r√©parer ce qui peut l'√™tre entre nous...",
          "Tu m√©rites mieux que ce que j'ai fait...",
        ];

      case LetterType.gratitude:
        return [
          "Ta g√©n√©rosit√© me touche au plus profond de mon c≈ìur...",
          "Tu as √©t√© l√† quand j'en avais le plus besoin...",
          "Tes petites attentions font toute la diff√©rence...",
          "Je ne sais pas comment te remercier assez...",
          "Tu m'as appris la vraie valeur de la gentillesse...",
        ];

      case LetterType.confession:
        return [
          "Il y a quelque chose d'important que je dois te dire...",
          "Mon c≈ìur d√©borde et j'ai besoin de me confier...",
          "Ces sentiments grandissent en moi chaque jour...",
          "Je ne peux plus garder cela pour moi...",
          "Tu as le droit de conna√Ætre mes sentiments...",
        ];

      default:
        return [
          "J'avais envie de prendre de tes nouvelles...",
          "Tu me manques et j'esp√®re que tu vas bien...",
          "J'ai pens√© √† toi aujourd'hui...",
          "Il faut qu'on se donne des nouvelles plus souvent...",
          "J'esp√®re que cette lettre te fera sourire...",
        ];
    }
  }

  /// V√©rifie si un template est disponible pour l'utilisateur
  static bool isTemplateUnlocked(LetterTemplate template, int userLevel) {
    return userLevel >= template.unlockLevel;
  }
}