#!/bin/bash

# üöÄ Script de Build et D√©ploiement JeuTaime
# Usage: ./deploy.sh [web|android|ios]

set -e  # Exit on any error

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions d'affichage
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Configuration
PROJECT_NAME="JeuTaime"
BUILD_MODE="release"
PLATFORM=${1:-web}

log_info "üöÄ D√©marrage du build $PROJECT_NAME pour $PLATFORM"

# V√©rification des pr√©requis
check_flutter() {
    log_info "V√©rification de Flutter..."
    if ! command -v flutter &> /dev/null; then
        log_error "Flutter n'est pas install√©. Veuillez installer Flutter SDK."
        exit 1
    fi
    
    flutter --version
    log_success "Flutter est install√© et accessible"
}

# Nettoyage des builds pr√©c√©dents
clean_build() {
    log_info "Nettoyage des builds pr√©c√©dents..."
    flutter clean
    rm -rf build/
    log_success "Nettoyage termin√©"
}

# Installation des d√©pendances
install_dependencies() {
    log_info "Installation des d√©pendances..."
    flutter pub get
    log_success "D√©pendances install√©es"
}

# Analyse du code
analyze_code() {
    log_info "Analyse du code..."
    flutter analyze --no-fatal-infos
    log_success "Analyse du code termin√©e"
}

# Tests
run_tests() {
    log_info "Ex√©cution des tests..."
    if [ -d "test" ]; then
        flutter test
        log_success "Tests pass√©s avec succ√®s"
    else
        log_warning "Aucun test trouv√©"
    fi
}

# Build Web
build_web() {
    log_info "Build Web en cours..."
    flutter build web --$BUILD_MODE \
        --web-renderer canvaskit \
        --source-maps \
        --dart-define=FLUTTER_WEB_USE_SKIA=true
    
    log_success "Build Web termin√© avec succ√®s"
    log_info "Fichiers g√©n√©r√©s dans: build/web/"
}

# Build Android
build_android() {
    log_info "Build Android en cours..."
    flutter build apk --$BUILD_MODE \
        --split-per-abi \
        --target-platform android-arm,android-arm64,android-x64
    
    log_success "Build Android termin√© avec succ√®s"
    log_info "APK g√©n√©r√©s dans: build/app/outputs/flutter-apk/"
}

# Build iOS
build_ios() {
    log_info "Build iOS en cours..."
    if [[ "$OSTYPE" != "darwin"* ]]; then
        log_error "Build iOS uniquement disponible sur macOS"
        exit 1
    fi
    
    flutter build ios --$BUILD_MODE --no-codesign
    log_success "Build iOS termin√© avec succ√®s"
    log_info "App g√©n√©r√©e dans: build/ios/iphoneos/"
}

# Optimisation des assets
optimize_assets() {
    log_info "Optimisation des assets..."
    
    # Compression des images si ImageMagick est disponible
    if command -v convert &> /dev/null; then
        find assets/images -name "*.png" -exec convert {} -strip -quality 85 {} \;
        log_success "Images PNG optimis√©es"
    fi
    
    # V√©rification de la taille des assets
    ASSETS_SIZE=$(du -sh assets/ 2>/dev/null | cut -f1 || echo "N/A")
    log_info "Taille des assets: $ASSETS_SIZE"
}

# G√©n√©ration du rapport de build
generate_report() {
    log_info "G√©n√©ration du rapport de build..."
    
    BUILD_DATE=$(date '+%Y-%m-%d %H:%M:%S')
    BUILD_HASH=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
    
    cat > build_report.md << EOF
# üìä Rapport de Build - $PROJECT_NAME

## üìã Informations G√©n√©rales
- **Date de build**: $BUILD_DATE
- **Plateforme**: $PLATFORM
- **Mode**: $BUILD_MODE
- **Commit**: $BUILD_HASH
- **Flutter**: $(flutter --version | head -n1)

## üìÅ Fichiers G√©n√©r√©s
EOF

    if [ "$PLATFORM" = "web" ]; then
        cat >> build_report.md << EOF
- **Build Web**: \`build/web/\`
- **Taille bundle**: $(du -sh build/web 2>/dev/null | cut -f1 || echo "N/A")
- **Fichiers principaux**:
  - \`index.html\`
  - \`main.dart.js\` $(ls -lh build/web/main.dart.js 2>/dev/null | awk '{print $5}' || echo "N/A")
  - \`flutter.js\`
  - \`assets/\`
EOF
    fi

    cat >> build_report.md << EOF

## ‚úÖ Statut
Build termin√© avec succ√®s ‚ú®

---
*G√©n√©r√© automatiquement par le script de d√©ploiement*
EOF

    log_success "Rapport g√©n√©r√©: build_report.md"
}

# D√©ploiement Firebase (si configur√©)
deploy_firebase() {
    log_info "Pr√©paration du d√©ploiement Firebase..."
    
    if [ ! -f "firebase.json" ]; then
        log_warning "firebase.json non trouv√©. Cr√©ation d'une configuration par d√©faut..."
        cat > firebase.json << EOF
{
  "hosting": {
    "public": "build/web",
    "ignore": [
      "firebase.json",
      "**/.*",
      "**/node_modules/**"
    ],
    "rewrites": [
      {
        "source": "**",
        "destination": "/index.html"
      }
    ],
    "headers": [
      {
        "source": "**/*.@(js|css)",
        "headers": [
          {
            "key": "Cache-Control",
            "value": "max-age=31536000"
          }
        ]
      },
      {
        "source": "**/*.@(png|jpg|jpeg|gif|ico|svg)",
        "headers": [
          {
            "key": "Cache-Control",
            "value": "max-age=31536000"
          }
        ]
      }
    ]
  }
}
EOF
        log_success "Configuration Firebase cr√©√©e"
    fi
    
    if command -v firebase &> /dev/null; then
        log_info "D√©ploiement sur Firebase Hosting..."
        firebase deploy --only hosting
        log_success "D√©ploiement Firebase termin√©"
    else
        log_warning "Firebase CLI non install√©. Installez avec: npm install -g firebase-tools"
        log_info "Pour d√©ployer manuellement:"
        log_info "1. Installez Firebase CLI: npm install -g firebase-tools"
        log_info "2. Connectez-vous: firebase login"
        log_info "3. Initialisez: firebase init hosting"
        log_info "4. D√©ployez: firebase deploy"
    fi
}

# Fonction principale
main() {
    echo "üéØ $PROJECT_NAME - Script de Build et D√©ploiement"
    echo "=================================================="
    
    check_flutter
    clean_build
    install_dependencies
    analyze_code
    # run_tests  # D√©sactiv√© car pas de tests pour le moment
    optimize_assets
    
    case $PLATFORM in
        "web")
            build_web
            generate_report
            read -p "Voulez-vous d√©ployer sur Firebase? (y/N): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                deploy_firebase
            fi
            ;;
        "android")
            build_android
            generate_report
            ;;
        "ios")
            build_ios
            generate_report
            ;;
        *)
            log_error "Plateforme non support√©e: $PLATFORM"
            log_info "Plateformes disponibles: web, android, ios"
            exit 1
            ;;
    esac
    
    echo
    log_success "üéâ Build $PLATFORM termin√© avec succ√®s!"
    log_info "üìä Consultez le rapport: build_report.md"
    
    if [ "$PLATFORM" = "web" ]; then
        log_info "üåê Pour tester localement: python -m http.server 8080 -d build/web"
    fi
}

# Ex√©cution du script principal
main "$@"