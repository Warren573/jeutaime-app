#!/bin/bash
# üìù Script de mise √† jour automatique du README avec les captures d'√©cran
# Usage: ./scripts/update_readme_screenshots.sh

set -e

# Configuration
README_FILE="README.md"
SCREENSHOT_DIR="assets/screenshots"

# Couleurs pour les logs
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

echo -e "${BLUE}üìù Mise √† jour automatique du README avec captures d'√©cran${NC}"
echo -e "${BLUE}========================================================${NC}"

# Fonction pour v√©rifier si un fichier d'image existe
check_image_exists() {
    local image_path="$1"
    if [ -f "$image_path" ]; then
        echo -e "${GREEN}‚úÖ Trouv√©: $image_path${NC}"
        return 0
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Manquant: $image_path${NC}"
        return 1
    fi
}

# Fonction pour remplacer un placeholder par une vraie image
replace_placeholder() {
    local section="$1"
    local feature="$2" 
    local image_name="$3"
    local description="$4"
    
    local image_path="$SCREENSHOT_DIR/features/$section/$image_name"
    
    if check_image_exists "$image_path"; then
        # Remplacer le placeholder dans le README
        sed -i.bak "s|üîÑ \*√Ä venir\*|![${description}](${image_path})|g" "$README_FILE"
        echo -e "${GREEN}‚úÖ Mis √† jour: $feature -> $image_path${NC}"
    else
        echo -e "${RED}‚ùå Image manquante pour: $feature${NC}"
        echo -e "${YELLOW}üí° Cr√©ez l'image: $image_path${NC}"
    fi
}

# Fonction principale de mise √† jour
update_readme() {
    echo -e "${BLUE}üîç Recherche des captures d'√©cran disponibles...${NC}"
    echo ""
    
    # Sauvegarder le README original
    cp "$README_FILE" "${README_FILE}.backup"
    echo -e "${YELLOW}üíæ Sauvegarde cr√©√©e: ${README_FILE}.backup${NC}"
    echo ""
    
    # Syst√®me de lettres
    echo -e "${BLUE}üíå Mise √† jour section Lettres...${NC}"
    replace_placeholder "letters" "Liste des conversations" "conversations_list_mobile_v1.png" "Conversations"
    replace_placeholder "letters" "√âcriture d'une lettre" "write_letter_mobile_v1.png" "√âcriture"
    replace_placeholder "letters" "Bo√Æte √† souvenirs" "memory_box_mobile_v1.png" "Souvenirs"
    echo ""
    
    # Bars virtuels
    echo -e "${BLUE}üç∏ Mise √† jour section Bars...${NC}"
    replace_placeholder "bars" "Interface principale" "bar_main_mobile_v1.png" "Bar Interface"
    replace_placeholder "bars" "Mini-jeux" "mini_games_mobile_v1.png" "Mini-jeux"
    replace_placeholder "bars" "Bar priv√©" "create_private_bar_mobile_v1.png" "Bar Priv√©"
    echo ""
    
    # Syst√®me d'√©conomie
    echo -e "${BLUE}üíé Mise √† jour section √âconomie...${NC}"
    replace_placeholder "economy" "Profil avec points" "profile_points_mobile_v1.png" "Profil Points"
    replace_placeholder "economy" "Boutique d'offrandes" "offerings_shop_mobile_v1.png" "Boutique"
    replace_placeholder "economy" "Historique" "transaction_history_mobile_v1.png" "Historique"
    echo ""
    
    # Profil utilisateur
    echo -e "${BLUE}üë§ Mise √† jour section Profil...${NC}"
    replace_placeholder "profile" "Vue du profil" "profile_view_mobile_v1.png" "Profil"
    replace_placeholder "profile" "√âdition du profil" "profile_edit_mobile_v1.png" "√âdition"
    replace_placeholder "profile" "Param√®tres" "settings_mobile_v1.png" "Param√®tres"
    replace_placeholder "profile" "Badges et r√©alisations" "badges_mobile_v1.png" "Badges"
    echo ""
    
    # Authentification
    echo -e "${BLUE}üîê Mise √† jour section Auth...${NC}"
    replace_placeholder "auth" "√âcran de connexion" "login_screen_mobile_v1.png" "Login"
    replace_placeholder "auth" "√âcran d'inscription" "signup_screen_mobile_v1.png" "Signup"
    replace_placeholder "auth" "Processus d'onboarding" "onboarding_mobile_v1.png" "Onboarding"
    echo ""
}

# Fonction pour ajouter des images de plateforme (iOS/Android/Web)
update_platform_images() {
    echo -e "${BLUE}üì± Mise √† jour des images de plateforme...${NC}"
    
    # Chercher les derni√®res captures par plateforme
    local latest_ios=$(ls -t "$SCREENSHOT_DIR/mobile/ios_"*.png 2>/dev/null | head -1)
    local latest_android=$(ls -t "$SCREENSHOT_DIR/mobile/android_"*.png 2>/dev/null | head -1)
    local latest_web=$(ls -t "$SCREENSHOT_DIR/web/"*.png 2>/dev/null | head -1)
    
    if [ -n "$latest_ios" ]; then
        echo -e "${GREEN}üì± iOS: $latest_ios${NC}"
        # Ici vous pourriez ajouter une logique pour mettre √† jour l'image iOS dans le README
    fi
    
    if [ -n "$latest_android" ]; then
        echo -e "${GREEN}ü§ñ Android: $latest_android${NC}"
        # Ici vous pourriez ajouter une logique pour mettre √† jour l'image Android
    fi
    
    if [ -n "$latest_web" ]; then
        echo -e "${GREEN}üåê Web: $latest_web${NC}"
        # Ici vous pourriez ajouter une logique pour mettre √† jour l'image Web
    fi
}

# Fonction pour afficher un rapport de ce qui a √©t√© fait
show_report() {
    echo -e "${BLUE}üìä Rapport de mise √† jour${NC}"
    echo -e "${BLUE}========================${NC}"
    
    # Compter les placeholders restants
    local remaining_placeholders=$(grep -c "üîÑ \*√Ä venir\*" "$README_FILE" || echo "0")
    
    if [ "$remaining_placeholders" -eq 0 ]; then
        echo -e "${GREEN}üéâ Tous les placeholders ont √©t√© remplac√©s !${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  $remaining_placeholders placeholder(s) restant(s)${NC}"
        echo -e "${YELLOW}üí° Ajoutez plus de captures d'√©cran pour les compl√©ter${NC}"
    fi
    
    # Montrer les diff√©rences
    if command -v diff &> /dev/null; then
        echo ""
        echo -e "${BLUE}üìù Changements effectu√©s:${NC}"
        diff "${README_FILE}.backup" "$README_FILE" | head -20 || true
    fi
    
    echo ""
    echo -e "${GREEN}‚úÖ README mis √† jour avec succ√®s !${NC}"
    echo -e "${BLUE}üíæ Sauvegarde disponible: ${README_FILE}.backup${NC}"
}

# V√©rifications pr√©liminaires
check_requirements() {
    echo -e "${BLUE}üîç V√©rification des pr√©requis...${NC}"
    
    if [ ! -f "$README_FILE" ]; then
        echo -e "${RED}‚ùå $README_FILE non trouv√©${NC}"
        exit 1
    fi
    
    if [ ! -d "$SCREENSHOT_DIR" ]; then
        echo -e "${RED}‚ùå Dossier $SCREENSHOT_DIR non trouv√©${NC}"
        echo -e "${YELLOW}üí° Cr√©ez d'abord des captures avec: ./scripts/take_screenshots.sh${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Pr√©requis valid√©s${NC}"
    echo ""
}

# Point d'entr√©e principal
main() {
    check_requirements
    update_readme
    update_platform_images
    show_report
    
    echo ""
    echo -e "${BLUE}üöÄ Prochaines √©tapes:${NC}"
    echo -e "${BLUE}- V√©rifiez le r√©sultat dans $README_FILE${NC}"
    echo -e "${BLUE}- Ajustez manuellement si n√©cessaire${NC}"
    echo -e "${BLUE}- Commitez les changements: git add . && git commit -m 'docs: update screenshots in README'${NC}"
}

# Gestion des arguments
case "${1:-}" in
    "--help"|"-h")
        echo "Usage: $0 [OPTIONS]"
        echo ""
        echo "Met √† jour automatiquement le README.md en rempla√ßant les placeholders"
        echo "'üîÑ *√Ä venir*' par les vraies captures d'√©cran disponibles."
        echo ""
        echo "Options:"
        echo "  --help, -h     Affiche cette aide"
        echo "  --dry-run      Simulation sans modification"
        echo ""
        exit 0
        ;;
    "--dry-run")
        echo -e "${YELLOW}üß™ Mode simulation (pas de modifications)${NC}"
        # Ici on pourrait ajouter une logique de simulation
        ;;
    *)
        main
        ;;
esac